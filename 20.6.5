To ensure that the new data is appended to the existing sheet in the output file, we need to read the existing workbook and sheet, append the data to the existing rows, and then save the workbook. Here is the updated version of the `CreateExcelForDailyPatientSiteFile` method:

```csharp
public string CreateExcelForDailyPatientSiteFile(FileInfo aAPCSRFile, string sheetName)
{
    string outputFilePath = string.Empty;
    XSSFWorkbook workbook = null;
    try
    {
        string sourceFile = aAPCSRFile?.ToString() ?? string.Empty;
        outputFilePath = Path.Combine(exportDirectory, $"{sheetName}.xlsx");

        if (File.Exists(outputFilePath))
        {
            // Open existing workbook
            using (FileStream fs = new FileStream(outputFilePath, FileMode.Open, FileAccess.Read))
            {
                workbook = new XSSFWorkbook(fs);
            }
        }
        else
        {
            // Create new workbook
            workbook = new XSSFWorkbook();
        }

        ISheet sheet = workbook.GetSheet(sheetName) ?? workbook.CreateSheet(sheetName); // Create or get sheet

        if (!string.IsNullOrEmpty(sourceFile))
        {
            AppendDailyPatientSiteCsvData(sourceFile, sheet, workbook, sheetName); // Append data from CSV file into sheet
        }

        using (FileStream stream = new FileStream(outputFilePath, FileMode.Create, FileAccess.Write)) // Save the workbook to an XLSX file
        {
            workbook.Write(stream);
        }

        Console.WriteLine(sheetName + "...csv file copied to XLSX successfully...");
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
    }
    finally
    {
        workbook?.Close();
    }
    return outputFilePath;
}

public void AppendDailyPatientSiteCsvData(string filePath, ISheet sheet, XSSFWorkbook workbook, string sheetName)
{
    try
    {
        XSSFCellStyle numberStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        numberStyle.DataFormat = workbook.CreateDataFormat().GetFormat("General");

        XSSFCellStyle dateStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        dateStyle.DataFormat = workbook.CreateDataFormat().GetFormat("dd-MM-yyyy");

        XSSFCellStyle timeStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        timeStyle.DataFormat = workbook.CreateDataFormat().GetFormat("hh:mm:ss");

        using (TextFieldParser reader = new TextFieldParser(filePath))
        {
            reader.HasFieldsEnclosedInQuotes = true;
            reader.SetDelimiters("\t");

            int rowIndex = sheet.LastRowNum + 1; // Start appending from the last row

            while (!reader.EndOfData)
            {
                var valueLines = reader.ReadFields();
                if (rowIndex == 0)
                {
                    CreateHeaderRow(sheet, numberStyle);
                    rowIndex++;
                }
                else if (int.TryParse(valueLines[0].Split(' ')[0], out _)) // Check if the first part is numeric
                {
                    ProcessDataRows(sheet, rowIndex, valueLines, dateStyle, numberStyle, timeStyle);
                    rowIndex++;
                }
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
        throw;
    }
}
```

Key changes:
1. **Appending Data**: The `AppendDailyPatientSiteCsvData` method starts appending data from the last row of the existing sheet.
2. **Row Index Management**: The `rowIndex` is initialized to `sheet.LastRowNum + 1` to ensure that new data is appended to the next available row.

This setup ensures that each time you run the code with a new input file, the data is appended to the existing data in the output file.